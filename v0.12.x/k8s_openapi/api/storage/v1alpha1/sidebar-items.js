initSidebarItems({"enum":[["ReadNamespacedCSIStorageCapacityResponse","Use `<ReadNamespacedCSIStorageCapacityResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIStorageCapacity::read_namespaced_csi_storage_capacity`]"],["ReadVolumeAttachmentResponse","Use `<ReadVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::read_volume_attachment`]"]],"struct":[["CSIStorageCapacity","CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes."],["ReadNamespacedCSIStorageCapacityOptional","Optional parameters of [`CSIStorageCapacity::read_namespaced_csi_storage_capacity`]"],["ReadVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::read_volume_attachment`]"],["VolumeAttachment","VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node."],["VolumeAttachmentSource","VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set."],["VolumeAttachmentSpec","VolumeAttachmentSpec is the specification of a VolumeAttachment request."],["VolumeAttachmentStatus","VolumeAttachmentStatus is the status of a VolumeAttachment request."],["VolumeError","VolumeError captures an error encountered during a volume operation."]]});
initSidebarItems({"enum":[["CreateStorageClassResponse","Use `<CreateStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::create_storage_class`]"],["CreateVolumeAttachmentResponse","Use `<CreateVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::create_volume_attachment`]"],["DeleteCollectionStorageClassResponse","Use `<DeleteCollectionStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::delete_collection_storage_class`]"],["DeleteCollectionVolumeAttachmentResponse","Use `<DeleteCollectionVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::delete_collection_volume_attachment`]"],["DeleteStorageClassResponse","Use `<DeleteStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::delete_storage_class`]"],["DeleteVolumeAttachmentResponse","Use `<DeleteVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::delete_volume_attachment`]"],["ListStorageClassResponse","Use `<ListStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::list_storage_class`]"],["ListVolumeAttachmentResponse","Use `<ListVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::list_volume_attachment`]"],["PatchStorageClassResponse","Use `<PatchStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::patch_storage_class`]"],["PatchVolumeAttachmentResponse","Use `<PatchVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::patch_volume_attachment`]"],["PatchVolumeAttachmentStatusResponse","Use `<PatchVolumeAttachmentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::patch_volume_attachment_status`]"],["ReadStorageClassResponse","Use `<ReadStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::read_storage_class`]"],["ReadVolumeAttachmentResponse","Use `<ReadVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::read_volume_attachment`]"],["ReadVolumeAttachmentStatusResponse","Use `<ReadVolumeAttachmentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::read_volume_attachment_status`]"],["ReplaceStorageClassResponse","Use `<ReplaceStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::replace_storage_class`]"],["ReplaceVolumeAttachmentResponse","Use `<ReplaceVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::replace_volume_attachment`]"],["ReplaceVolumeAttachmentStatusResponse","Use `<ReplaceVolumeAttachmentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::replace_volume_attachment_status`]"],["WatchStorageClassResponse","Use `<WatchStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::watch_storage_class`]"],["WatchVolumeAttachmentResponse","Use `<WatchVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::watch_volume_attachment`]"]],"struct":[["CreateStorageClassOptional","Optional parameters of [`StorageClass::create_storage_class`]"],["CreateVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::create_volume_attachment`]"],["ReadStorageClassOptional","Optional parameters of [`StorageClass::read_storage_class`]"],["ReadVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::read_volume_attachment`]"],["ReadVolumeAttachmentStatusOptional","Optional parameters of [`VolumeAttachment::read_volume_attachment_status`]"],["ReplaceStorageClassOptional","Optional parameters of [`StorageClass::replace_storage_class`]"],["ReplaceVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::replace_volume_attachment`]"],["ReplaceVolumeAttachmentStatusOptional","Optional parameters of [`VolumeAttachment::replace_volume_attachment_status`]"],["StorageClass","StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned."],["StorageClassList","StorageClassList is a collection of storage classes."],["VolumeAttachment","VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node."],["VolumeAttachmentList","VolumeAttachmentList is a collection of VolumeAttachment objects."],["VolumeAttachmentSource","VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set."],["VolumeAttachmentSpec","VolumeAttachmentSpec is the specification of a VolumeAttachment request."],["VolumeAttachmentStatus","VolumeAttachmentStatus is the status of a VolumeAttachment request."],["VolumeError","VolumeError captures an error encountered during a volume operation."]]});
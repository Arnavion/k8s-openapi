initSidebarItems({"enum":[["CreateCSIDriverResponse","Use `<CreateCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::create_csi_driver`]"],["CreateCSINodeResponse","Use `<CreateCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::create_csi_node`]"],["CreateStorageClassResponse","Use `<CreateStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::create_storage_class`]"],["CreateVolumeAttachmentResponse","Use `<CreateVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::create_volume_attachment`]"],["DeleteCSIDriverResponse","Use `<DeleteCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::delete_csi_driver`]"],["DeleteCSINodeResponse","Use `<DeleteCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::delete_csi_node`]"],["DeleteCollectionCSIDriverResponse","Use `<DeleteCollectionCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::delete_collection_csi_driver`]"],["DeleteCollectionCSINodeResponse","Use `<DeleteCollectionCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::delete_collection_csi_node`]"],["DeleteCollectionStorageClassResponse","Use `<DeleteCollectionStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::delete_collection_storage_class`]"],["DeleteCollectionVolumeAttachmentResponse","Use `<DeleteCollectionVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::delete_collection_volume_attachment`]"],["DeleteStorageClassResponse","Use `<DeleteStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::delete_storage_class`]"],["DeleteVolumeAttachmentResponse","Use `<DeleteVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::delete_volume_attachment`]"],["ListCSIDriverResponse","Use `<ListCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::list_csi_driver`]"],["ListCSINodeResponse","Use `<ListCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::list_csi_node`]"],["ListStorageClassResponse","Use `<ListStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::list_storage_class`]"],["ListVolumeAttachmentResponse","Use `<ListVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::list_volume_attachment`]"],["PatchCSIDriverResponse","Use `<PatchCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::patch_csi_driver`]"],["PatchCSINodeResponse","Use `<PatchCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::patch_csi_node`]"],["PatchStorageClassResponse","Use `<PatchStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::patch_storage_class`]"],["PatchVolumeAttachmentResponse","Use `<PatchVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::patch_volume_attachment`]"],["ReadCSIDriverResponse","Use `<ReadCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::read_csi_driver`]"],["ReadCSINodeResponse","Use `<ReadCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::read_csi_node`]"],["ReadStorageClassResponse","Use `<ReadStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::read_storage_class`]"],["ReadVolumeAttachmentResponse","Use `<ReadVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::read_volume_attachment`]"],["ReplaceCSIDriverResponse","Use `<ReplaceCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::replace_csi_driver`]"],["ReplaceCSINodeResponse","Use `<ReplaceCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::replace_csi_node`]"],["ReplaceStorageClassResponse","Use `<ReplaceStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::replace_storage_class`]"],["ReplaceVolumeAttachmentResponse","Use `<ReplaceVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::replace_volume_attachment`]"],["WatchCSIDriverResponse","Use `<WatchCSIDriverResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSIDriver::watch_csi_driver`]"],["WatchCSINodeResponse","Use `<WatchCSINodeResponse as Response>::try_from_parts` to parse the HTTP response body of [`CSINode::watch_csi_node`]"],["WatchStorageClassResponse","Use `<WatchStorageClassResponse as Response>::try_from_parts` to parse the HTTP response body of [`StorageClass::watch_storage_class`]"],["WatchVolumeAttachmentResponse","Use `<WatchVolumeAttachmentResponse as Response>::try_from_parts` to parse the HTTP response body of [`VolumeAttachment::watch_volume_attachment`]"]],"struct":[["CSIDriver","CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced."],["CSIDriverList","CSIDriverList is a collection of CSIDriver objects."],["CSIDriverSpec","CSIDriverSpec is the specification of a CSIDriver."],["CSINode","CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object."],["CSINodeDriver","CSINodeDriver holds information about the specification of one CSI driver installed on a node"],["CSINodeList","CSINodeList is a collection of CSINode objects."],["CSINodeSpec","CSINodeSpec holds information about the specification of all CSI drivers installed on a node"],["CreateCSIDriverOptional","Optional parameters of [`CSIDriver::create_csi_driver`]"],["CreateCSINodeOptional","Optional parameters of [`CSINode::create_csi_node`]"],["CreateStorageClassOptional","Optional parameters of [`StorageClass::create_storage_class`]"],["CreateVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::create_volume_attachment`]"],["ReadCSIDriverOptional","Optional parameters of [`CSIDriver::read_csi_driver`]"],["ReadCSINodeOptional","Optional parameters of [`CSINode::read_csi_node`]"],["ReadStorageClassOptional","Optional parameters of [`StorageClass::read_storage_class`]"],["ReadVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::read_volume_attachment`]"],["ReplaceCSIDriverOptional","Optional parameters of [`CSIDriver::replace_csi_driver`]"],["ReplaceCSINodeOptional","Optional parameters of [`CSINode::replace_csi_node`]"],["ReplaceStorageClassOptional","Optional parameters of [`StorageClass::replace_storage_class`]"],["ReplaceVolumeAttachmentOptional","Optional parameters of [`VolumeAttachment::replace_volume_attachment`]"],["StorageClass","StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned."],["StorageClassList","StorageClassList is a collection of storage classes."],["VolumeAttachment","VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node."],["VolumeAttachmentList","VolumeAttachmentList is a collection of VolumeAttachment objects."],["VolumeAttachmentSource","VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set."],["VolumeAttachmentSpec","VolumeAttachmentSpec is the specification of a VolumeAttachment request."],["VolumeAttachmentStatus","VolumeAttachmentStatus is the status of a VolumeAttachment request."],["VolumeError","VolumeError captures an error encountered during a volume operation."],["VolumeNodeResources","VolumeNodeResources is a set of resource limits for scheduling of volumes."]]});
initSidebarItems({"enum":[["CreateNamespacedControllerRevisionResponse","Use `<CreateNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::create_namespaced_controller_revision`]"],["CreateNamespacedDaemonSetResponse","Use `<CreateNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::create_namespaced_daemon_set`]"],["CreateNamespacedDeploymentResponse","Use `<CreateNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::create_namespaced_deployment`]"],["CreateNamespacedReplicaSetResponse","Use `<CreateNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::create_namespaced_replica_set`]"],["CreateNamespacedStatefulSetResponse","Use `<CreateNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::create_namespaced_stateful_set`]"],["DeleteCollectionNamespacedControllerRevisionResponse","Use `<DeleteCollectionNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::delete_collection_namespaced_controller_revision`]"],["DeleteCollectionNamespacedDaemonSetResponse","Use `<DeleteCollectionNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::delete_collection_namespaced_daemon_set`]"],["DeleteCollectionNamespacedDeploymentResponse","Use `<DeleteCollectionNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::delete_collection_namespaced_deployment`]"],["DeleteCollectionNamespacedReplicaSetResponse","Use `<DeleteCollectionNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::delete_collection_namespaced_replica_set`]"],["DeleteCollectionNamespacedStatefulSetResponse","Use `<DeleteCollectionNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::delete_collection_namespaced_stateful_set`]"],["DeleteNamespacedControllerRevisionResponse","Use `<DeleteNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::delete_namespaced_controller_revision`]"],["DeleteNamespacedDaemonSetResponse","Use `<DeleteNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::delete_namespaced_daemon_set`]"],["DeleteNamespacedDeploymentResponse","Use `<DeleteNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::delete_namespaced_deployment`]"],["DeleteNamespacedReplicaSetResponse","Use `<DeleteNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::delete_namespaced_replica_set`]"],["DeleteNamespacedStatefulSetResponse","Use `<DeleteNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::delete_namespaced_stateful_set`]"],["ListControllerRevisionForAllNamespacesResponse","Use `<ListControllerRevisionForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::list_controller_revision_for_all_namespaces`]"],["ListDaemonSetForAllNamespacesResponse","Use `<ListDaemonSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::list_daemon_set_for_all_namespaces`]"],["ListDeploymentForAllNamespacesResponse","Use `<ListDeploymentForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::list_deployment_for_all_namespaces`]"],["ListNamespacedControllerRevisionResponse","Use `<ListNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::list_namespaced_controller_revision`]"],["ListNamespacedDaemonSetResponse","Use `<ListNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::list_namespaced_daemon_set`]"],["ListNamespacedDeploymentResponse","Use `<ListNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::list_namespaced_deployment`]"],["ListNamespacedReplicaSetResponse","Use `<ListNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::list_namespaced_replica_set`]"],["ListNamespacedStatefulSetResponse","Use `<ListNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::list_namespaced_stateful_set`]"],["ListReplicaSetForAllNamespacesResponse","Use `<ListReplicaSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::list_replica_set_for_all_namespaces`]"],["ListStatefulSetForAllNamespacesResponse","Use `<ListStatefulSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::list_stateful_set_for_all_namespaces`]"],["PatchNamespacedControllerRevisionResponse","Use `<PatchNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::patch_namespaced_controller_revision`]"],["PatchNamespacedDaemonSetResponse","Use `<PatchNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::patch_namespaced_daemon_set`]"],["PatchNamespacedDaemonSetStatusResponse","Use `<PatchNamespacedDaemonSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::patch_namespaced_daemon_set_status`]"],["PatchNamespacedDeploymentResponse","Use `<PatchNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::patch_namespaced_deployment`]"],["PatchNamespacedDeploymentStatusResponse","Use `<PatchNamespacedDeploymentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::patch_namespaced_deployment_status`]"],["PatchNamespacedReplicaSetResponse","Use `<PatchNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::patch_namespaced_replica_set`]"],["PatchNamespacedReplicaSetStatusResponse","Use `<PatchNamespacedReplicaSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::patch_namespaced_replica_set_status`]"],["PatchNamespacedStatefulSetResponse","Use `<PatchNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::patch_namespaced_stateful_set`]"],["PatchNamespacedStatefulSetStatusResponse","Use `<PatchNamespacedStatefulSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::patch_namespaced_stateful_set_status`]"],["ReadNamespacedControllerRevisionResponse","Use `<ReadNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::read_namespaced_controller_revision`]"],["ReadNamespacedDaemonSetResponse","Use `<ReadNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::read_namespaced_daemon_set`]"],["ReadNamespacedDaemonSetStatusResponse","Use `<ReadNamespacedDaemonSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::read_namespaced_daemon_set_status`]"],["ReadNamespacedDeploymentResponse","Use `<ReadNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::read_namespaced_deployment`]"],["ReadNamespacedDeploymentStatusResponse","Use `<ReadNamespacedDeploymentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::read_namespaced_deployment_status`]"],["ReadNamespacedReplicaSetResponse","Use `<ReadNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::read_namespaced_replica_set`]"],["ReadNamespacedReplicaSetStatusResponse","Use `<ReadNamespacedReplicaSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::read_namespaced_replica_set_status`]"],["ReadNamespacedStatefulSetResponse","Use `<ReadNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::read_namespaced_stateful_set`]"],["ReadNamespacedStatefulSetStatusResponse","Use `<ReadNamespacedStatefulSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::read_namespaced_stateful_set_status`]"],["ReplaceNamespacedControllerRevisionResponse","Use `<ReplaceNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::replace_namespaced_controller_revision`]"],["ReplaceNamespacedDaemonSetResponse","Use `<ReplaceNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::replace_namespaced_daemon_set`]"],["ReplaceNamespacedDaemonSetStatusResponse","Use `<ReplaceNamespacedDaemonSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::replace_namespaced_daemon_set_status`]"],["ReplaceNamespacedDeploymentResponse","Use `<ReplaceNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::replace_namespaced_deployment`]"],["ReplaceNamespacedDeploymentStatusResponse","Use `<ReplaceNamespacedDeploymentStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::replace_namespaced_deployment_status`]"],["ReplaceNamespacedReplicaSetResponse","Use `<ReplaceNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::replace_namespaced_replica_set`]"],["ReplaceNamespacedReplicaSetStatusResponse","Use `<ReplaceNamespacedReplicaSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::replace_namespaced_replica_set_status`]"],["ReplaceNamespacedStatefulSetResponse","Use `<ReplaceNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::replace_namespaced_stateful_set`]"],["ReplaceNamespacedStatefulSetStatusResponse","Use `<ReplaceNamespacedStatefulSetStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::replace_namespaced_stateful_set_status`]"],["WatchControllerRevisionForAllNamespacesResponse","Use `<WatchControllerRevisionForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::watch_controller_revision_for_all_namespaces`]"],["WatchDaemonSetForAllNamespacesResponse","Use `<WatchDaemonSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::watch_daemon_set_for_all_namespaces`]"],["WatchDeploymentForAllNamespacesResponse","Use `<WatchDeploymentForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::watch_deployment_for_all_namespaces`]"],["WatchNamespacedControllerRevisionResponse","Use `<WatchNamespacedControllerRevisionResponse as Response>::try_from_parts` to parse the HTTP response body of [`ControllerRevision::watch_namespaced_controller_revision`]"],["WatchNamespacedDaemonSetResponse","Use `<WatchNamespacedDaemonSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`DaemonSet::watch_namespaced_daemon_set`]"],["WatchNamespacedDeploymentResponse","Use `<WatchNamespacedDeploymentResponse as Response>::try_from_parts` to parse the HTTP response body of [`Deployment::watch_namespaced_deployment`]"],["WatchNamespacedReplicaSetResponse","Use `<WatchNamespacedReplicaSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::watch_namespaced_replica_set`]"],["WatchNamespacedStatefulSetResponse","Use `<WatchNamespacedStatefulSetResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::watch_namespaced_stateful_set`]"],["WatchReplicaSetForAllNamespacesResponse","Use `<WatchReplicaSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`ReplicaSet::watch_replica_set_for_all_namespaces`]"],["WatchStatefulSetForAllNamespacesResponse","Use `<WatchStatefulSetForAllNamespacesResponse as Response>::try_from_parts` to parse the HTTP response body of [`StatefulSet::watch_stateful_set_for_all_namespaces`]"]],"struct":[["ControllerRevision","ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers."],["ControllerRevisionList","ControllerRevisionList is a resource containing a list of ControllerRevision objects."],["CreateNamespacedControllerRevisionOptional","Optional parameters of [`ControllerRevision::create_namespaced_controller_revision`]"],["CreateNamespacedDaemonSetOptional","Optional parameters of [`DaemonSet::create_namespaced_daemon_set`]"],["CreateNamespacedDeploymentOptional","Optional parameters of [`Deployment::create_namespaced_deployment`]"],["CreateNamespacedReplicaSetOptional","Optional parameters of [`ReplicaSet::create_namespaced_replica_set`]"],["CreateNamespacedStatefulSetOptional","Optional parameters of [`StatefulSet::create_namespaced_stateful_set`]"],["DaemonSet","DaemonSet represents the configuration of a daemon set."],["DaemonSetCondition","DaemonSetCondition describes the state of a DaemonSet at a certain point."],["DaemonSetList","DaemonSetList is a collection of daemon sets."],["DaemonSetSpec","DaemonSetSpec is the specification of a daemon set."],["DaemonSetStatus","DaemonSetStatus represents the current status of a daemon set."],["DaemonSetUpdateStrategy","DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet."],["Deployment","Deployment enables declarative updates for Pods and ReplicaSets."],["DeploymentCondition","DeploymentCondition describes the state of a deployment at a certain point."],["DeploymentList","DeploymentList is a list of Deployments."],["DeploymentSpec","DeploymentSpec is the specification of the desired behavior of the Deployment."],["DeploymentStatus","DeploymentStatus is the most recently observed status of the Deployment."],["DeploymentStrategy","DeploymentStrategy describes how to replace existing pods with new ones."],["ReadNamespacedControllerRevisionOptional","Optional parameters of [`ControllerRevision::read_namespaced_controller_revision`]"],["ReadNamespacedDaemonSetOptional","Optional parameters of [`DaemonSet::read_namespaced_daemon_set`]"],["ReadNamespacedDaemonSetStatusOptional","Optional parameters of [`DaemonSet::read_namespaced_daemon_set_status`]"],["ReadNamespacedDeploymentOptional","Optional parameters of [`Deployment::read_namespaced_deployment`]"],["ReadNamespacedDeploymentStatusOptional","Optional parameters of [`Deployment::read_namespaced_deployment_status`]"],["ReadNamespacedReplicaSetOptional","Optional parameters of [`ReplicaSet::read_namespaced_replica_set`]"],["ReadNamespacedReplicaSetStatusOptional","Optional parameters of [`ReplicaSet::read_namespaced_replica_set_status`]"],["ReadNamespacedStatefulSetOptional","Optional parameters of [`StatefulSet::read_namespaced_stateful_set`]"],["ReadNamespacedStatefulSetStatusOptional","Optional parameters of [`StatefulSet::read_namespaced_stateful_set_status`]"],["ReplaceNamespacedControllerRevisionOptional","Optional parameters of [`ControllerRevision::replace_namespaced_controller_revision`]"],["ReplaceNamespacedDaemonSetOptional","Optional parameters of [`DaemonSet::replace_namespaced_daemon_set`]"],["ReplaceNamespacedDaemonSetStatusOptional","Optional parameters of [`DaemonSet::replace_namespaced_daemon_set_status`]"],["ReplaceNamespacedDeploymentOptional","Optional parameters of [`Deployment::replace_namespaced_deployment`]"],["ReplaceNamespacedDeploymentStatusOptional","Optional parameters of [`Deployment::replace_namespaced_deployment_status`]"],["ReplaceNamespacedReplicaSetOptional","Optional parameters of [`ReplicaSet::replace_namespaced_replica_set`]"],["ReplaceNamespacedReplicaSetStatusOptional","Optional parameters of [`ReplicaSet::replace_namespaced_replica_set_status`]"],["ReplaceNamespacedStatefulSetOptional","Optional parameters of [`StatefulSet::replace_namespaced_stateful_set`]"],["ReplaceNamespacedStatefulSetStatusOptional","Optional parameters of [`StatefulSet::replace_namespaced_stateful_set_status`]"],["ReplicaSet","ReplicaSet ensures that a specified number of pod replicas are running at any given time."],["ReplicaSetCondition","ReplicaSetCondition describes the state of a replica set at a certain point."],["ReplicaSetList","ReplicaSetList is a collection of ReplicaSets."],["ReplicaSetSpec","ReplicaSetSpec is the specification of a ReplicaSet."],["ReplicaSetStatus","ReplicaSetStatus represents the current status of a ReplicaSet."],["RollingUpdateDaemonSet","Spec to control the desired behavior of daemon set rolling update."],["RollingUpdateDeployment","Spec to control the desired behavior of rolling update."],["RollingUpdateStatefulSetStrategy","RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType."],["StatefulSet","StatefulSet represents a set of pods with consistent identities. Identities are defined as:  - Network: A single stable DNS and hostname.  - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity."],["StatefulSetCondition","StatefulSetCondition describes the state of a statefulset at a certain point."],["StatefulSetList","StatefulSetList is a collection of StatefulSets."],["StatefulSetSpec","A StatefulSetSpec is the specification of a StatefulSet."],["StatefulSetStatus","StatefulSetStatus represents the current state of a StatefulSet."],["StatefulSetUpdateStrategy","StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy."]]});
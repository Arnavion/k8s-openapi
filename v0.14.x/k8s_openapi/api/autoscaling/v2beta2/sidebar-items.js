initSidebarItems({"enum":[["ReadNamespacedHorizontalPodAutoscalerResponse","Use `<ReadNamespacedHorizontalPodAutoscalerResponse as Response>::try_from_parts` to parse the HTTP response body of [`HorizontalPodAutoscaler::read_namespaced_horizontal_pod_autoscaler`]"],["ReadNamespacedHorizontalPodAutoscalerStatusResponse","Use `<ReadNamespacedHorizontalPodAutoscalerStatusResponse as Response>::try_from_parts` to parse the HTTP response body of [`HorizontalPodAutoscaler::read_namespaced_horizontal_pod_autoscaler_status`]"]],"struct":[["ContainerResourceMetricSource","ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the “pods” source.  Only one “target” type should be set."],["ContainerResourceMetricStatus","ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the “pods” source."],["CrossVersionObjectReference","CrossVersionObjectReference contains enough information to let you identify the referred resource."],["ExternalMetricSource","ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."],["ExternalMetricStatus","ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object."],["HPAScalingPolicy","HPAScalingPolicy is a single policy which must hold true for a specified past interval."],["HPAScalingRules","HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen."],["HorizontalPodAutoscaler","HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified."],["HorizontalPodAutoscalerBehavior","HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively)."],["HorizontalPodAutoscalerCondition","HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point."],["HorizontalPodAutoscalerSpec","HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler."],["HorizontalPodAutoscalerStatus","HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler."],["MetricIdentifier","MetricIdentifier defines the name and optionally selector for a metric"],["MetricSpec","MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once)."],["MetricStatus","MetricStatus describes the last-read state of a single metric."],["MetricTarget","MetricTarget defines the target value, average value, or average utilization of a specific metric"],["MetricValueStatus","MetricValueStatus holds the current value for a metric"],["ObjectMetricSource","ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object)."],["ObjectMetricStatus","ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object)."],["PodsMetricSource","PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value."],["PodsMetricStatus","PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second)."],["ReadNamespacedHorizontalPodAutoscalerOptional","Optional parameters of [`HorizontalPodAutoscaler::read_namespaced_horizontal_pod_autoscaler`]"],["ReadNamespacedHorizontalPodAutoscalerStatusOptional","Optional parameters of [`HorizontalPodAutoscaler::read_namespaced_horizontal_pod_autoscaler_status`]"],["ResourceMetricSource","ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the “pods” source.  Only one “target” type should be set."],["ResourceMetricStatus","ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the “pods” source."]]});